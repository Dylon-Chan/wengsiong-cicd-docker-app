name: CICD for Nodejs Application with Docker
run-name: ${{ github.actor }} is running CICD for Nodejs Application with Docker

on:
    push:
        branches: [ main, "*"]

jobs:
    unit-testing:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v3
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                node-version: 18
            - name: Install dependencies
              run: npm ci
            - name: Run the unit tests
              run: npm run test

    docker-build-and-test:
        runs-on: ubuntu-latest
        needs: unit-testing
        services:
            docker:
                image: docker:stable
                options: --privileged
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v3
            - name: Build the Docker image
              run: docker build -t nodejs-app .
            - name: Run the docker image to test
              run: docker run -d -p 8080:8080 nodejs-app test

    build-and-push-image-to-ecr:
        runs-on: ubuntu-latest
        needs: docker-build-and-test
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ap-southeast-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Create ECR repository using Terraform
              run: |
                cd ecr
                terraform init
                terraform apply -auto-approve
            - name: Build and push image to Amazon ECR
              env: 
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: wengsiong-docker-nodejs-app
                IMAGE_TAG: latest
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    deploy-to-ecs:
        runs-on: ubuntu-latest
        needs: build-and-push-image-to-ecr
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ap-southeast-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Create ECR repository using Terraform
              run: |
                cd ecr
                terraform init
                terraform apply -auto-approve
            - name: Build and push image to Amazon ECR
              env: 
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: wengsiong-docker-nodejs-app
                IMAGE_TAG: latest
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            - name: Create AWS ECS Cluster, Task Definition and Service
              run: |
                cd ecs
                terraform init
                terraform apply -auto-approve -target=aws_security_group.ecs
                terraform apply -auto-approve
